// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum MemberRole {
  VIEWER
  EDITOR
  ADMIN
}

enum MemberStatus {
  ACTIVE
  PENDING
  INACTIVE
}

enum ExportType {
  SPRING_BOOT
  POSTMAN
}

enum ExportStatus {
  QUEUED
  IN_PROGRESS
  COMPLETED
  FAILED
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)

  diagrams Diagram[]
}

model Diagram {
  id            String          @id @default(cuid())
  ownerId       String
  name          String
  description   String?
  // Modelo canónico del diagrama (tu JSON “semántico”)
  model         Json            @default("{}")
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  owner         User            @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  members       DiagramMember[]
  diagramInvite DiagramInvite[]
  isActive      Boolean         @default(true)

  /**
   * exports       ExportJob[]
   * postmanFile   PostmanCollection?
   * snapshots    DiagramSnapshot[]
   */

  @@index([ownerId])
}

model DiagramMember {
  id           String       @id @default(cuid())
  diagramId    String
  username     String
  invitationId String       @unique
  role         MemberRole   @default(EDITOR)
  joinedAt     DateTime     @default(now())
  status       MemberStatus @default(ACTIVE)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  isActive     Boolean      @default(true)

  diagram    Diagram       @relation(fields: [diagramId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  invitation DiagramInvite @relation(fields: [invitationId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([diagramId, invitationId]) // una invitación una vez por diagrama
  @@index([invitationId])
}

// Invitaciones por link o email (para colaborar)
model DiagramInvite {
  id        String     @id @default(cuid())
  diagramId String
  email     String?
  role      MemberRole @default(EDITOR)
  token     String     @unique
  expiresAt DateTime?
  usedAt    DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)

  diagram       Diagram        @relation(fields: [diagramId], references: [id], onDelete: Cascade)
  DiagramMember DiagramMember?

  @@index([diagramId])
  @@index([email])
}

// Versionado/snapshots para “undo grande”, auditoría o checkpoint de colaboración
/**
 * model DiagramSnapshot {
 * id          String   @id @default(cuid())
 * diagramId   String
 * label       String?
 * createdById String?
 * createdAt   DateTime @default(now())
 * // Guardar ambos te da flexibilidad
 * model Json
 * ydoc  Bytes?
 * diagram Diagram @relation(fields: [diagramId], references: [id], onDelete: Cascade)
 * @@index([diagramId])
 * @@index([createdAt])
 * }
 */

// Exportaciones (código Spring Boot ZIP y/o colección Postman)
/**
 * model ExportJob {
 * id          String       @id @default(cuid())
 * diagramId   String
 * type        ExportType
 * status      ExportStatus @default(QUEUED)
 * artifactUrl String? // dónde quedó el ZIP/JSON
 * log         String? // errores/diagnóstico
 * startedAt   DateTime?
 * finishedAt  DateTime?
 * createdAt   DateTime     @default(now())
 * diagram Diagram @relation(fields: [diagramId], references: [id], onDelete: Cascade, onUpdate: Cascade)
 * @@index([diagramId])
 * @@index([type, status])
 * }
 * // Guarda la colección generada por comodidad/versionado
 * model PostmanCollection {
 * id        String   @id @default(cuid())
 * diagramId String   @unique
 * name      String
 * json      Json
 * // version   String? // semver si la regeneras
 * createdAt DateTime @default(now())
 * diagram Diagram @relation(fields: [diagramId], references: [id], onDelete: Cascade, onUpdate: Cascade)
 * @@index([diagramId])
 * }
 */
