// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum MemberRole {
  EDITOR
  ADMIN
}

enum MemberStatus {
  ACTIVE
  PENDING
  INACTIVE
}

enum ExportType {
  SPRING_BOOT
  POSTMAN
}

enum ExportStatus {
  QUEUED
  IN_PROGRESS
  COMPLETED
  FAILED
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)

  diagrams Diagram[]
}

model Diagram {
  id            String          @id @default(cuid())
  ownerId       String
  name          String
  description   String?
  model         Json            @default("{}")
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  owner         User            @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  members       DiagramMember[]
  diagramInvite DiagramInvite[]
  isActive      Boolean         @default(true)

  @@index([ownerId])
}

model DiagramMember {
  id           String        @id @default(cuid())
  diagramId    String
  username     String
  invitationId String        @unique
  joinedAt     DateTime      @default(now())
  status       MemberStatus  @default(ACTIVE)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  isActive     Boolean       @default(true)
  diagram      Diagram       @relation(fields: [diagramId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  invitation   DiagramInvite @relation(fields: [invitationId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([diagramId, invitationId])
  @@index([invitationId])
}

model DiagramInvite {
  id        String   @id @default(cuid())
  diagramId String
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)

  diagram       Diagram        @relation(fields: [diagramId], references: [id], onDelete: Cascade)
  DiagramMember DiagramMember?

  @@index([diagramId])
}
